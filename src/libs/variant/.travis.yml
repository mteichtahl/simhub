language: cpp

git:
  depth: 1

matrix:
  include:
    # ubuntu 14.04, gcc-5, debug
    - env: VERSION=5 BUILD_TYPE=Debug
      compiler: gcc
      os: linux
      dist: trusty
      sudo: required
      addons: &gcc5
        apt:
          packages:
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
    # ubuntu 14.04, gcc-5, release
    - env: VERSION=5 BUILD_TYPE=Release
      compiler: gcc
      os: linux
      dist: trusty
      sudo: required
      addons: *gcc5
    # ubuntu 14.04, gcc-6, debug
    - env: VERSION=6 BUILD_TYPE=Debug
      compiler: gcc
      os: linux
      dist: trusty
      sudo: required
      addons: &gcc6
        apt:
          packages:
            - g++-6
          sources:
            - ubuntu-toolchain-r-test
    # ubuntu 14.04, gcc-6, release
    - env: VERSION=6 BUILD_TYPE=Release
      compiler: gcc
      os: linux
      dist: trusty
      sudo: required
      addons: *gcc6
    # ubuntu 14.04, clang-3.5, debug
    - env: VERSION=3.5 BUILD_TYPE=Debug
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: &libcxx
        apt:
          packages:
            - libc++-dev
    # ubuntu 14.04, clang-3.5, release
    - env: VERSION=3.5 BUILD_TYPE=Release
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.6, debug
    - env: VERSION=3.6 BUILD_TYPE=Debug
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.6, release
    - env: VERSION=3.6 BUILD_TYPE=Release
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.7, debug
    - env: VERSION=3.7 BUILD_TYPE=Debug
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.7, release
    - env: VERSION=3.7 BUILD_TYPE=Release
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.8, debug
    - env: VERSION=3.8 BUILD_TYPE=Debug
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.8, release
    - env: VERSION=3.8 BUILD_TYPE=Release
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.9, debug
    - env: VERSION=3.9 BUILD_TYPE=Debug
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # ubuntu 14.04, clang-3.9, release
    - env: VERSION=3.9 BUILD_TYPE=Release
      compiler: clang
      os: linux
      dist: trusty
      sudo: required
      addons: *libcxx
    # OS X Yosemite 10.10, Apple Clang, debug
    - env: BUILD_TYPE=Debug
      compiler: clang
      os: osx
      osx_image: xcode6.4
    # OS X Yosemite 10.10, Apple Clang, release
    - env: BUILD_TYPE=Release
      compiler: clang
      os: osx
      osx_image: xcode6.4
    # OS X El Capitan 10.11, Apple Clang, debug
    - env: BUILD_TYPE=Debug
      compiler: clang
      os: osx
      osx_image: xcode7.3
    # OS X El Capitan 10.11, apple-clang-8, release
    - env: BUILD_TYPE=Release
      compiler: clang
      os: osx
      osx_image: xcode7.3
    # OS X Sierra 10.12, apple-clang-8, debug
    - env: BUILD_TYPE=Debug
      compiler: clang
      os: osx
      osx_image: xcode8.2
    # OS X Sierra 10.12, apple-clang-8, release
    - env: BUILD_TYPE=Release
      compiler: clang
      os: osx
      osx_image: xcode8.2

before_install:
  # Install the newest `cmake`.
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      brew update;
      brew uninstall cmake;
      brew install cmake;
    elif [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      wget https://cmake.org/files/v3.7/cmake-3.7.1-Linux-x86_64.sh;
      chmod u+x cmake-3.7.1-Linux-x86_64.sh;
      sudo ./cmake-3.7.1-Linux-x86_64.sh --skip-license --prefix=/usr/local;
    fi
  # Install a specific clang version.
  - if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${CC}" = "clang" ] && [ -n "${VERSION}" ]; then
      wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -;
      sudo apt-add-repository -y "deb http://llvm.org/apt/trusty llvm-toolchain-trusty-${VERSION} main";
      sudo apt-get update -qq;
      sudo apt-get install -qq -y "clang-${VERSION}";
    fi
  # Set the correct `CXXFLAGS` environment variable.
  - if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${CC}" = "clang" ]; then
      export CXXFLAGS="${CXXFLAGS} -stdlib=libc++";
    fi
  # Set the correct `CC` and `CXX` environment variables.
  - if [ -n "${VERSION}" ]; then
      export CC="${CC}-${VERSION}";
      export CXX="${CXX}-${VERSION}";
    fi
  - ${CXX} --version

install:
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DMPARK_VARIANT_INCLUDE_TESTS="mpark;libc++" ..
  - cmake --build .

script:
  - ctest -V

notifications:
  email: false
